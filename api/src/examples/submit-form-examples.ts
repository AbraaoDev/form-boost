import { FormSubmissionService } from '@/services/submit-form';

export class SubmitFormExamples {
  static getValidSubmissionExample() {
    return {
      id: 'formulario_001',
      answers: {
        nome_completo: 'Maria Santos',
        data_nascimento: '1995-02-14',
        ocupacao: 'ti',
      },
      userId: 'user123',
      schemaVersion: 3,
    };
  }

  static getValidSubmissionWithoutSchemaVersion() {
    return {
      id: 'formulario_001',
      answers: {
        nome_completo: 'Jo√£o Silva',
        data_nascimento: '1990-05-15',
        ocupacao: 'eng',
      },
      userId: 'user123',
      // schemaVersion omitido - usa vers√£o mais recente
    };
  }

  static getInvalidSubmissionMissingRequired() {
    return {
      id: 'formulario_001',
      answers: {
        // nome_completo ausente (obrigat√≥rio)
        data_nascimento: '1995-02-14',
        ocupacao: 'ti',
      },
      userId: 'user123',
    };
  }

  static getInvalidSubmissionWithCalculatedField() {
    return {
      id: 'formulario_001',
      answers: {
        nome_completo: 'Maria Santos',
        data_nascimento: '1995-02-14',
        ocupacao: 'ti',
        idade: 30, // Campo calculated n√£o deve ser enviado
        e_maior_de_idade: true, // Campo calculated n√£o deve ser enviado
      },
      userId: 'user123',
    };
  }

  static getInvalidSubmissionWithObsoleteSchema() {
    return {
      id: 'formulario_001',
      answers: {
        nome_completo: 'Maria Santos',
        data_nascimento: '1995-02-14',
        ocupacao: 'ti',
      },
      userId: 'user123',
      schemaVersion: 1, // Vers√£o obsoleta
    };
  }

  static getInvalidSubmissionWithInvalidData() {
    return {
      id: 'formulario_001',
      answers: {
        nome_completo: '123', // Nome inv√°lido (n√∫meros)
        data_nascimento: 'invalid-date', // Data inv√°lida
        ocupacao: 'invalid-option', // Op√ß√£o inv√°lida
      },
      userId: 'user123',
    };
  }

  static async testSubmitFormExamples() {
    console.log('üß™ Testando submit-form...\n');

    // Teste 1: Submiss√£o v√°lida com schema_version
    console.log('‚úÖ Teste 1: Submiss√£o v√°lida com schema_version');
    try {
      const validExample = SubmitFormExamples.getValidSubmissionExample();
      console.log('Payload:', JSON.stringify(validExample, null, 2));
      console.log('Resultado esperado: 201 Created com campos calculados');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    // Teste 2: Submiss√£o v√°lida sem schema_version
    console.log('\n‚úÖ Teste 2: Submiss√£o v√°lida sem schema_version');
    try {
      const validWithoutVersion =
        SubmitFormExamples.getValidSubmissionWithoutSchemaVersion();
      console.log('Payload:', JSON.stringify(validWithoutVersion, null, 2));
      console.log('Resultado esperado: 201 Created (usa vers√£o mais recente)');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    // Teste 3: Campos obrigat√≥rios ausentes
    console.log('\n‚ùå Teste 3: Campos obrigat√≥rios ausentes');
    try {
      const missingRequired =
        SubmitFormExamples.getInvalidSubmissionMissingRequired();
      console.log('Payload:', JSON.stringify(missingRequired, null, 2));
      console.log('Resultado esperado: 400 - failed_validation');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    // Teste 4: Campos calculated enviados
    console.log('\n‚ùå Teste 4: Campos calculated enviados');
    try {
      const withCalculated =
        SubmitFormExamples.getInvalidSubmissionWithCalculatedField();
      console.log('Payload:', JSON.stringify(withCalculated, null, 2));
      console.log('Resultado esperado: 422 - business_inconsistency');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    // Teste 5: Schema obsoleto
    console.log('\n‚ùå Teste 5: Schema obsoleto');
    try {
      const obsoleteSchema =
        SubmitFormExamples.getInvalidSubmissionWithObsoleteSchema();
      console.log('Payload:', JSON.stringify(obsoleteSchema, null, 2));
      console.log('Resultado esperado: 409 - schema_outdated');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    // Teste 6: Dados inv√°lidos
    console.log('\n‚ùå Teste 6: Dados inv√°lidos');
    try {
      const invalidData =
        SubmitFormExamples.getInvalidSubmissionWithInvalidData();
      console.log('Payload:', JSON.stringify(invalidData, null, 2));
      console.log('Resultado esperado: 422 - business_inconsistency');
    } catch (error) {
      console.log('‚ùå Erro:', error);
    }

    console.log('\nüéØ Testes conclu√≠dos!');
  }

  static getExpectedResponseStructure() {
    return {
      message: 'Resposta registrada com sucesso.',
      id_submit: 'resposta_12345',
      calculated: {
        idade: 30,
        e_maior_de_idade: true,
      },
      executed_at: '2024-03-15T22:12:01Z',
    };
  }

  static getExpectedErrorStructures() {
    return {
      // 400 - Campos obrigat√≥rios ausentes
      failed_validation: {
        error: 'failed_validation',
        message: 'Some required fields were not completed.',
        errors: [
          {
            field: 'nome_completo',
            message: 'Campo obrigat√≥rio n√£o informado.',
          },
        ],
      },

      // 422 - Inconsist√™ncia sem√¢ntica
      business_inconsistency: {
        error: 'business_inconsistency',
        message: 'Inconsistent data detected.',
        errors: [
          {
            field: 'idade',
            message:
              'The calculated value is below that permitted for this occupation.',
          },
        ],
      },

      // 409 - Schema obsoleto
      schema_outdated: {
        error: 'schema_outdated',
        message:
          'The specified schema version is no longer accepted for new submissions.',
      },
    };
  }
}
